name: Build & Release Windows EXE

on:
  push:
    tags:
      - 'v*'         # e.g. v1.0.0
  workflow_dispatch:  # allow manual runs too

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install build dependencies
        shell: pwsh
        run: |
          pip install --upgrade pip
          pip install pyinstaller psutil
          if (Test-Path requirements.txt) { pip install -r requirements.txt }

      # Download the Gyan full build (correct release link)
      - name: Download FFmpeg (Gyan full build)
        shell: pwsh
        run: |
          $url = "https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-full.7z"
          $out = "ffmpeg.7z"
          Invoke-WebRequest -Uri $url -OutFile $out
          7z x $out -y -offmpeg
          # Find ffmpeg.exe under extracted tree (bin\ffmpeg.exe)
          $ff = Get-ChildItem -Path "ffmpeg" -Recurse -Filter "ffmpeg.exe" | Where-Object { $_.FullName -match "\\bin\\ffmpeg\.exe$" } | Select-Object -First 1 -ExpandProperty FullName
          if (-not $ff) { throw "ffmpeg.exe not found after extraction." }
          "FFMPEG_EXE=$ff" | Out-File -FilePath $Env:GITHUB_ENV -Append
          Write-Host "Using ffmpeg at $ff"

      - name: Build one-file EXE with PyInstaller
        shell: pwsh
        run: |
          # CHANGE THIS if your entry script has a different filename:
          $EntryScript = "gui_ffmpeg_compressor.py"

          if (-not (Test-Path $EntryScript)) {
            throw "Entry script '$EntryScript' not found. Update the workflow to point to your main .py file."
          }

          pyinstaller --name FFmpegCompressor --onefile --noconsole $EntryScript --add-binary "$Env:FFMPEG_EXE;."
          Get-ChildItem -Recurse dist

      - name: Rename EXE to include tag
        if: startsWith(github.ref, 'refs/tags/')
        shell: pwsh
        run: |
          $tag = "${{ github.ref_name }}"
          $src = "dist/FFmpegCompressor.exe"
          $dst = "dist/FFmpegCompressor-$tag.exe"
          if (-not (Test-Path $src)) { throw "Built EXE not found at $src" }
          Copy-Item $src $dst -Force
          Write-Host "Release asset prepared: $dst"
          "RELEASE_ASSET=$dst" | Out-File -FilePath $Env:GITHUB_ENV -Append

      - name: Upload EXE to GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.RELEASE_ASSET }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Optional: also upload as workflow artifact (useful for non-tag/manual runs)
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: FFmpegCompressor-Windows
          path: |
            dist/FFmpegCompressor.exe
            dist/FFmpegCompressor-*.exe
